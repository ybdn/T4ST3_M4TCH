# Generated by Django 5.2.5 on 2025-08-09 23:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_listitem_is_watched'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FriendMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('taste_compatibility', 'Compatibilité des goûts'), ('versus_challenge', 'Défi Versus'), ('discovery_sync', 'Découverte synchrone')], default='versus_challenge', max_length=30, verbose_name='Type de match')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('completed', 'Terminé'), ('abandoned', 'Abandonné')], default='active', max_length=20, verbose_name='Statut du match')),
                ('score_user1', models.PositiveIntegerField(default=0, verbose_name='Score utilisateur 1')),
                ('score_user2', models.PositiveIntegerField(default=0, verbose_name='Score utilisateur 2')),
                ('compatibility_score', models.FloatField(blank=True, null=True, verbose_name='Score de compatibilité (%)')),
                ('total_rounds', models.PositiveIntegerField(default=10, verbose_name='Nombre de rounds total')),
                ('current_round', models.PositiveIntegerField(default=1, verbose_name='Round actuel')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Dernière activité')),
                ('is_active', models.BooleanField(default=True, verbose_name='Match actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_user1', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur 1')),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_user2', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur 2')),
            ],
            options={
                'verbose_name': 'Match entre amis',
                'verbose_name_plural': 'Matchs entre amis',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('accepted', 'Acceptée'), ('blocked', 'Bloquée'), ('declined', 'Refusée')], default='pending', max_length=20, verbose_name="Statut de l'amitié")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de la demande')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('addressee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_received', to=settings.AUTH_USER_MODEL, verbose_name='Destinataire')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_sent', to=settings.AUTH_USER_MODEL, verbose_name='Demandeur')),
            ],
            options={
                'verbose_name': 'Amitié',
                'verbose_name_plural': 'Amitiés',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.PositiveIntegerField(verbose_name='Numéro du round')),
                ('content_external_id', models.CharField(max_length=100, verbose_name='ID externe du contenu')),
                ('content_type', models.CharField(choices=[('FILMS', 'Films'), ('SERIES', 'Séries'), ('MUSIQUE', 'Musique'), ('LIVRES', 'Livres')], max_length=20, verbose_name='Type de contenu')),
                ('content_source', models.CharField(choices=[('tmdb', 'The Movie Database'), ('spotify', 'Spotify'), ('google_books', 'Google Books'), ('openlibrary', 'Open Library')], max_length=20, verbose_name='Source du contenu')),
                ('content_title', models.CharField(max_length=200, verbose_name='Titre du contenu')),
                ('content_metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées du contenu')),
                ('user1_choice', models.CharField(blank=True, choices=[('liked', 'Aimé'), ('disliked', 'Pas aimé'), ('skipped', 'Ignoré')], max_length=20, null=True, verbose_name='Choix utilisateur 1')),
                ('user2_choice', models.CharField(blank=True, choices=[('liked', 'Aimé'), ('disliked', 'Pas aimé'), ('skipped', 'Ignoré')], max_length=20, null=True, verbose_name='Choix utilisateur 2')),
                ('user1_choice_at', models.DateTimeField(blank=True, null=True, verbose_name='Date choix utilisateur 1')),
                ('user2_choice_at', models.DateTimeField(blank=True, null=True, verbose_name='Date choix utilisateur 2')),
                ('is_match', models.BooleanField(default=False, verbose_name='Match (les deux ont aimé)')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Session terminée')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='core.friendmatch', verbose_name='Match')),
            ],
            options={
                'verbose_name': 'Session de match',
                'verbose_name_plural': 'Sessions de match',
                'ordering': ['match', 'round_number'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(max_length=100, verbose_name='ID externe du contenu')),
                ('content_type', models.CharField(choices=[('FILMS', 'Films'), ('SERIES', 'Séries'), ('MUSIQUE', 'Musique'), ('LIVRES', 'Livres')], max_length=20, verbose_name='Type de contenu')),
                ('source', models.CharField(choices=[('tmdb', 'The Movie Database'), ('spotify', 'Spotify'), ('google_books', 'Google Books'), ('openlibrary', 'Open Library')], max_length=20, verbose_name='Source API')),
                ('action', models.CharField(choices=[('liked', 'Aimé'), ('disliked', 'Pas aimé'), ('added', 'Ajouté à une liste'), ('skipped', 'Ignoré')], max_length=20, verbose_name='Action utilisateur')),
                ('title', models.CharField(max_length=200, verbose_name='Titre du contenu')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées du contenu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name="Date de l'action")),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Préférence utilisateur',
                'verbose_name_plural': 'Préférences utilisateur',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gamertag', models.CharField(max_length=20, unique=True, verbose_name='Gamertag unique')),
                ('display_name', models.CharField(max_length=50, verbose_name="Nom d'affichage")),
                ('bio', models.TextField(blank=True, verbose_name='Biographie')),
                ('avatar_url', models.URLField(blank=True, verbose_name="URL de l'avatar")),
                ('is_public', models.BooleanField(default=True, verbose_name='Profil public')),
                ('total_matches', models.PositiveIntegerField(default=0, verbose_name='Nombre total de matchs')),
                ('successful_matches', models.PositiveIntegerField(default=0, verbose_name='Matchs ayant mené à un ajout')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateur',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='friendmatch',
            index=models.Index(fields=['user1', 'status'], name='core_friend_user1_i_fce4db_idx'),
        ),
        migrations.AddIndex(
            model_name='friendmatch',
            index=models.Index(fields=['user2', 'status'], name='core_friend_user2_i_aa43f5_idx'),
        ),
        migrations.AddIndex(
            model_name='friendmatch',
            index=models.Index(fields=['is_active', 'last_activity'], name='core_friend_is_acti_d16dd0_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['requester', 'status'], name='core_friend_request_8ec657_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['addressee', 'status'], name='core_friend_address_817982_idx'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.UniqueConstraint(fields=('requester', 'addressee'), name='unique_friendship_request'),
        ),
        migrations.AddIndex(
            model_name='matchsession',
            index=models.Index(fields=['match', 'is_completed'], name='core_matchs_match_i_184ae4_idx'),
        ),
        migrations.AddIndex(
            model_name='matchsession',
            index=models.Index(fields=['content_external_id', 'content_source'], name='core_matchs_content_9a231b_idx'),
        ),
        migrations.AddConstraint(
            model_name='matchsession',
            constraint=models.UniqueConstraint(fields=('match', 'round_number'), name='unique_round_per_match'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['user', 'content_type'], name='core_userpr_user_id_7e0f35_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['user', 'action'], name='core_userpr_user_id_a2d60d_idx'),
        ),
        migrations.AddIndex(
            model_name='userpreference',
            index=models.Index(fields=['external_id', 'source'], name='core_userpr_externa_c723d1_idx'),
        ),
        migrations.AddConstraint(
            model_name='userpreference',
            constraint=models.UniqueConstraint(fields=('user', 'external_id', 'source'), name='unique_user_content_preference'),
        ),
    ]
